//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a Chugin boilerplate, generated by chugerate!
//-----------------------------------------------------------------------------

// this should align with the correct versions of these ChucK files
#include "chuck_dl.h"
#include "chuck_def.h"

// general includes
#include <stdio.h>
#include <limits.h>

// declaration of chugin constructor
CK_DLL_CTOR(convolution_ctor);
// declaration of chugin desctructor
CK_DLL_DTOR(convolution_dtor);

// example of getter/setter
CK_DLL_MFUN(convolution_setParam);
CK_DLL_MFUN(convolution_getParam);
CK_DLL_MFUN(convolution_add_tap);
CK_DLL_MFUN(convolution_reset);

// for Chugins extending UGen, this is mono synthesis function for 1 sample
CK_DLL_TICK(convolution_tick);

// this is a special offset reserved for Chugin internal data
t_CKINT convolution_data_offset = 0;


#define TAPS_NB 88000

// class definition for internal Chugin data
// (note: this isn't strictly necessary, but serves as example
// of one recommended approach)
class convolution
{
public:
    // constructor
    convolution( t_CKFLOAT fs)
    {
        m_param = 0;
				tap_idx = 0;
				buf_idx = 0;
				ponder = 0;
    }

    // for Chugins extending UGen
    SAMPLE tick( SAMPLE in )
    {
				float res = 0;
				int j = 0;
        if (tap_idx == 0){
						return in;
				}
				else {
						buf[buf_idx] = in;
						buf_idx ++; if (buf_idx >= tap_idx) buf_idx = 0;

						for (int i = 0; i < tap_idx; i++) {
								j = i+buf_idx; 
								if (j>= tap_idx) j -= tap_idx;

								res += taps[i] * buf[ j ];
//								res += taps[i] * buf[ (i+buf_idx) % tap_idx];
						}

						return res  / ponder;
				}
    }

    // set parameter example
    float setParam( t_CKFLOAT p )
    {
        m_param = p;
        return p;
    }

    // get parameter example
    float getParam() { return m_param; }
    
		float set_add_tap( t_CKFLOAT p ){
				taps[tap_idx] = p;
				tap_idx ++;

				ponder = (ponder * (tap_idx-1) + p) / tap_idx;

		}

		float set_reset () {
				tap_idx =0;
		}

private:
    // instance data
    float m_param;
		int tap_idx;
		int buf_idx;
		float taps[TAPS_NB] = {0};
		float buf[TAPS_NB] = {0};
		float ponder;
};


// query function: chuck calls this when loading the Chugin
// NOTE: developer will need to modify this function to
// add additional functions to this Chugin
CK_DLL_QUERY( convolution )
{
    // hmm, don't change this...
    QUERY->setname(QUERY, "convolution");
    
    // begin the class definition
    // can change the second argument to extend a different ChucK class
    QUERY->begin_class(QUERY, "convolution", "UGen");

    // register the constructor (probably no need to change)
    QUERY->add_ctor(QUERY, convolution_ctor);
    // register the destructor (probably no need to change)
    QUERY->add_dtor(QUERY, convolution_dtor);
    
    // for UGen's only: add tick function
    QUERY->add_ugen_func(QUERY, convolution_tick, NULL, 1, 1);
    
    // NOTE: if this is to be a UGen with more than 1 channel, 
    // e.g., a multichannel UGen -- will need to use add_ugen_funcf()
    // and declare a tickf function using CK_DLL_TICKF

    // example of adding setter method
    QUERY->add_mfun(QUERY, convolution_setParam, "float", "param");
    // example of adding argument to the above method
    QUERY->add_arg(QUERY, "float", "arg");

    // example of adding getter method
    QUERY->add_mfun(QUERY, convolution_getParam, "float", "param");
    

		// PARAMS
    QUERY->add_mfun(QUERY, convolution_add_tap, "float", "add_tap");
    QUERY->add_arg(QUERY, "float", "arg");

		QUERY->add_mfun(QUERY, convolution_reset, "void", "reset");





    // this reserves a variable in the ChucK internal class to store 
    // referene to the c++ class we defined above
    convolution_data_offset = QUERY->add_mvar(QUERY, "int", "@c_data", false);

    // end the class definition
    // IMPORTANT: this MUST be called!
    QUERY->end_class(QUERY);

    // wasn't that a breeze?
    return TRUE;
}


// implementation for the constructor
CK_DLL_CTOR(convolution_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, convolution_data_offset) = 0;
    
    // instantiate our internal c++ class representation
    convolution * bcdata = new convolution(API->vm->get_srate());
    
    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, convolution_data_offset) = (t_CKINT) bcdata;
}


// implementation for the destructor
CK_DLL_DTOR(convolution_dtor)
{
    // get our c++ class pointer
    convolution * bcdata = (convolution *) OBJ_MEMBER_INT(SELF, convolution_data_offset);
    // check it
    if( bcdata )
    {
        // clean up
        delete bcdata;
        OBJ_MEMBER_INT(SELF, convolution_data_offset) = 0;
        bcdata = NULL;
    }
}


// implementation for tick function
CK_DLL_TICK(convolution_tick)
{
    // get our c++ class pointer
    convolution * c = (convolution *) OBJ_MEMBER_INT(SELF, convolution_data_offset);
 
    // invoke our tick function; store in the magical out variable
    if(c) *out = c->tick(in);

    // yes
    return TRUE;
}


// example implementation for setter
CK_DLL_MFUN(convolution_setParam)
{
    // get our c++ class pointer
    convolution * bcdata = (convolution *) OBJ_MEMBER_INT(SELF, convolution_data_offset);
    // set the return value
    RETURN->v_float = bcdata->setParam(GET_NEXT_FLOAT(ARGS));
}


// example implementation for getter
CK_DLL_MFUN(convolution_getParam)
{
    // get our c++ class pointer
    convolution * bcdata = (convolution *) OBJ_MEMBER_INT(SELF, convolution_data_offset);
    // set the return value
    RETURN->v_float = bcdata->getParam();
}

CK_DLL_MFUN(convolution_add_tap)
{
    // get our c++ class pointer
    convolution * bcdata = (convolution *) OBJ_MEMBER_INT(SELF, convolution_data_offset);
    // set the return value
    RETURN->v_float = bcdata->set_add_tap(GET_NEXT_FLOAT(ARGS));
}

CK_DLL_MFUN(convolution_reset)
{
    // get our c++ class pointer
    convolution * bcdata = (convolution *) OBJ_MEMBER_INT(SELF, convolution_data_offset);
    // set the return value
    bcdata->set_reset();
}
